# -*- coding: utf-8 -*-
# –ë–æ—Ç: YouTube + —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º (–±–µ–∑ –∞–≤—Ç–æ-–≤–∏–¥–µ–æ/–ø—Ä–µ–≤—å—é).
# –ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ —á–µ—Ä–µ–∑ JobQueue.
# –¢—Ä–µ–±—É–µ—Ç—Å—è: python-telegram-bot[job-queue]==20.7  (—Ä–æ–≤–Ω–æ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –≤ requirements.txt)

import os
import re
import csv
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Tuple

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
)

logging.basicConfig(format="%(asctime)s %(levelname)s %(message)s", level=logging.INFO)
log = logging.getLogger("bot")

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
TOKEN = (os.getenv("BOT_TOKEN") or os.getenv("TOKEN") or "").strip()
YOUR_USERNAME = os.getenv("YOUR_USERNAME", "vadimpobedniy")

# –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï (Railway Volume –º–æ–Ω—Ç–∏—Ä—É–µ–º –≤ /app/data)
DATA_DIR = "/app/data"
os.makedirs(DATA_DIR, exist_ok=True)
STATE_FILE = os.path.join(DATA_DIR, "state.json")
USERS_CSV  = os.path.join(DATA_DIR, "users.csv")

# –ê–¥–º–∏–Ω—ã (–∫–æ–º—É –¥–æ—Å—Ç—É–ø–Ω—ã /users /stuck1 /stats /checkfiles /exportusers)
ADMIN_IDS = {"444338007"}  # –¥–æ–±–∞–≤—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –µ—â—ë ID –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏

if not TOKEN:
    log.error("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ Railway ‚Üí Variables.")
    raise SystemExit(1)

# –ì–¥–µ –∏—â–µ–º —Ñ–∞–π–ª—ã —Å —É—Ä–æ–∫–∞–º–∏: —Å–ø–µ—Ä–≤–∞ –≤ media/, –∑–∞—Ç–µ–º –≤ –∫–æ—Ä–Ω–µ —Ä–µ–ø–æ
SEARCH_DIRS: List[str] = ["media", "."]

def find_path(filename: Optional[str]) -> Optional[str]:
    if not filename:
        return None
    for base in SEARCH_DIRS:
        path = os.path.join(base, filename) if base != "." else filename
        if os.path.exists(path):
            return path
    return None

# ===== –£–†–û–ö–ò =====
LESSONS: Dict[int, Dict[str, Any]] = {
    1: {
        "title": "–£—Ä–æ–∫ 1: –¶–µ–Ω–∞ —Ç–µ–Ω–∏",
        "youtube": "https://youtu.be/ssLtF2UIVVc",
        "video_file": "lesson1.mp4",
        "docs": [],
        "links": [
            ("üß≠ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–±–æ—Ä (Evolution)", "https://evolution.life/p/vadimpobedniy/products"),
            ("‚ÑπÔ∏è –ß—Ç–æ —Ç–∞–∫–æ–µ Evolution? (–≤–∏–¥–µ–æ)", "https://youtu.be/jjq8STmDlf4?si=EQ9imb8Pw2lE9FTB"),
            ("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–¥–∏–º–æ–º", f"https://t.me/{YOUR_USERNAME}"),
        ],
        "final_note": None,
    },
    2: {
        "title": "–£—Ä–æ–∫ 2: –û–±–Ω—É–ª—è–µ–º —Å—Ç—Ä–∞—Ö",
        "youtube": "https://youtu.be/wRysU2M19vI",
        "video_file": "lesson2.mp4",
        "docs": ["podcast_30_questions.pdf"],
        "links": [("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–¥–∏–º–æ–º", f"https://t.me/{YOUR_USERNAME}")],
        "final_note": None,
    },
    3: {
        "title": "–£—Ä–æ–∫ 3: –ì–æ–≤–æ—Ä–∏ —Ç–∞–∫, —á—Ç–æ–±—ã —Ç–µ–±—è —Å–ª—É—à–∞–ª–∏",
        "youtube": "https://youtu.be/zc5NLQ3y_68",
        "video_file": "lesson3.mp4",
        "docs": [],
        "links": [("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–¥–∏–º–æ–º", f"https://t.me/{YOUR_USERNAME}")],
        "final_note": None,
    },
    4: {
        "title": "–£—Ä–æ–∫ 4: –í—ã—Ö–æ–¥ –≤ —ç—Ñ–∏—Ä = —Ä–æ—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
        "youtube": "https://youtu.be/YoNxh203KCE",
        "video_file": "lesson4.mp4",
        "docs": ["open any door.pdf"],   # –ø—Ä–æ–≤–µ—Ä—å —Ç–æ—á–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –≤ —Ä–µ–ø–æ
        "links": [
            ("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–¥–∏–º–æ–º", f"https://t.me/{YOUR_USERNAME}"),
            ("üéµ ¬´–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏¬ª", "https://youtu.be/-orqHfJdo3E?si=7sCs_q7KTyd0rD8i"),
            ("üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ YouTube ¬´–ì–ª–∞–≤–Ω—ã–π –ì–µ—Ä–æ–π¬ª", "https://www.youtube.com/@Protagonistofgame"),
        ],
        "final_note": (
            "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ç–æ, —á—Ç–æ –±—ã–ª —Å–æ –º–Ω–æ–π —ç—Ç–∏ —á–µ—Ç—ã—Ä–µ –¥–Ω—è. –Ø –≤–µ—Ä—é –≤ —Ç–≤–æ–π —É—Å–ø–µ—Ö. "
            "–ù–∞—á–∏–Ω–∞–π –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ ‚Äî –∏ —É —Ç–µ–±—è –≤—Å—ë –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è.\n\n"
            "–û—Ç–∫—Ä—ã—Ç –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–æ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–º —ç—Ñ–∏—Ä–∞–º, –ø–æ–¥–∫–∞—Å—Ç–∞–º –∏ –¥—Ä—É–≥–∏–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º. –Ø –Ω–∞ —Å–≤—è–∑–∏."
        ),
    },
}

# ===== –ü–†–û–ì–†–ï–°–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =====
USERS: Dict[str, Dict[str, Any]] = {}  # chat_id -> {"step": int, "last": datetime}

def load_state() -> None:
    global USERS
    try:
        if os.path.exists(STATE_FILE) and os.path.getsize(STATE_FILE) > 0:
            with open(STATE_FILE, "r", encoding="utf-8") as f:
                raw = json.load(f)
            USERS = {}
            for cid, st in raw.items():
                last = st.get("last")
                USERS[cid] = {
                    "step": st.get("step", 1),
                    "last": datetime.fromisoformat(last) if last else datetime.min
                }
            log.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(USERS)}")
        else:
            USERS = {}
            log.info("STATE –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç ‚Äî –Ω–∞—á–Ω—ë–º —Å –Ω—É–ª—è")
    except Exception as e:
        log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")
        USERS = {}

def save_state() -> None:
    out = {
        cid: {"step": st.get("step", 1), "last": st.get("last", datetime.min).isoformat()}
        for cid, st in USERS.items()
    }
    try:
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(out, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")

# –ó–∞–ø–∏—Å—å –≤ CSV ¬´–∫—Ç–æ –≤–ø–µ—Ä–≤—ã–µ –Ω–∞–∂–∞–ª —Å—Ç–∞—Ä—Ç¬ª
def _append_user_csv(chat_id: str, when: datetime) -> None:
    try:
        seen = set()
        if os.path.exists(USERS_CSV):
            with open(USERS_CSV, "r", newline="", encoding="utf-8") as f:
                for row in csv.reader(f):
                    if row:
                        seen.add(row[0])
        if chat_id not in seen:
            with open(USERS_CSV, "a", newline="", encoding="utf-8") as f:
                w = csv.writer(f)
                w.writerow([chat_id, when.isoformat()])
    except Exception as e:
        log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å {USERS_CSV}: {e}")

# ===== –ö–ù–û–ü–ö–ò =====
def kb_for_lesson(n: int) -> InlineKeyboardMarkup:
    meta = LESSONS[n]
    rows: List[List[InlineKeyboardButton]] = []
    if meta.get("youtube"):
        rows.append([InlineKeyboardButton("‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ YouTube", url=meta["youtube"])])
    if meta.get("video_file"):
        rows.append([InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ (MP4, –±–µ–∑ —Å–∂–∞—Ç–∏—è)", callback_data=f"dl_video_{n}")])
    if meta.get("docs"):
        rows.append([InlineKeyboardButton("üìé –°–∫–∞—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã (PDF)", callback_data=f"dl_docs_{n}")])
    for text, url in meta.get("links", []):
        rows.append([InlineKeyboardButton(text, url=url)])
    return InlineKeyboardMarkup(rows) if rows else InlineKeyboardMarkup([])

# ===== –û–¢–ü–†–ê–í–ö–ê –£–†–û–ö–ê (–¢–û–õ–¨–ö–û –¢–ï–ö–°–¢ + –ö–ù–û–ü–ö–ò) =====
async def send_lesson(context: ContextTypes.DEFAULT_TYPE, chat_id: int, n: int) -> None:
    meta = LESSONS[n]
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"‚≠êÔ∏è {meta['title']}\n\n–í—ã–±–∏—Ä–∞–π: —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ YouTube –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—ã –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ ‚§µÔ∏è",
        reply_markup=kb_for_lesson(n)
    )
    if n == 4 and meta.get("final_note"):
        await context.bot.send_message(chat_id=chat_id, text=meta["final_note"], reply_markup=kb_for_lesson(n))

# ===== –ö–û–ú–ê–ù–î–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = str(update.effective_chat.id)
    if chat_id not in USERS:
        USERS[chat_id] = {"step": 1, "last": datetime.now()}
        save_state()
        _append_user_csv(chat_id, USERS[chat_id]["last"])
        await update.message.reply_text("üöÄ –°—Ç–∞—Ä—Ç—É–µ–º. –¢–≤–æ–π –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –≥–æ—Ç–æ–≤ üëá")
        await send_lesson(context, int(chat_id), 1)
    else:
        cur = USERS[chat_id]["step"]
        await update.message.reply_text("–ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏. –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ üëá")
        await send_lesson(context, int(chat_id), cur)

async def next_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = str(update.effective_chat.id)
    if chat_id not in USERS:
        USERS[chat_id] = {"step": 0, "last": datetime.now() - timedelta(days=2)}
    cur = USERS[chat_id]["step"]
    if cur >= 4:
        await update.message.reply_text("–í—Å–µ 4 —É—Ä–æ–∫–∞ —É–∂–µ –≤—ã–¥–∞–Ω—ã üéâ")
        return
    USERS[chat_id]["step"] = cur + 1
    USERS[chat_id]["last"] = datetime.now()
    save_state()
    await send_lesson(context, int(chat_id), USERS[chat_id]["step"])

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö (–û–¢–ü–†–ê–í–ö–ê –§–ê–ô–õ–û–í –ü–û –¢–†–ï–ë–û–í–ê–ù–ò–Æ) =====
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    data = (q.data or "").strip()
    chat_id = int(q.message.chat.id)

    # –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (–±–µ–∑ —Å–∂–∞—Ç–∏—è)
    m = re.match(r"dl_video_(\d+)$", data)
    if m:
        n = int(m.group(1))
        meta = LESSONS.get(n, {})
        vname = meta.get("video_file")
        vpath = find_path(vname)
        if vpath:
            try:
                with open(vpath, "rb") as vf:
                    await context.bot.send_document(
                        chat_id=chat_id,
                        document=vf,
                        filename=os.path.basename(vpath),
                        caption="–°–∫–∞—á–∞–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ (MP4)"
                    )
            except Exception as e:
                await context.bot.send_message(chat_id=chat_id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ: {e}")
        else:
            await context.bot.send_message(chat_id=chat_id, text=f"–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {vname or '‚Äî'}")
        return

    # –°–∫–∞—á–∞—Ç—å –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    m = re.match(r"dl_docs_(\d+)$", data)
    if m:
        n = int(m.group(1))
        docs = LESSONS.get(n, {}).get("docs") or []
        if not docs:
            await context.bot.send_message(chat_id=chat_id, text="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return
        sent_any = False
        for dname in docs:
            dpath = find_path(dname)
            if dpath:
                try:
                    with open(dpath, "rb") as df:
                        await context.bot.send_document(
                            chat_id=chat_id,
                            document=df,
                            filename=os.path.basename(dpath),
                            caption="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ —É—Ä–æ–∫—É"
                        )
                    sent_any = True
                except Exception as e:
                    await context.bot.send_message(chat_id=chat_id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {os.path.basename(dpath)}\n{e}")
            else:
                await context.bot.send_message(chat_id=chat_id, text=f"–ù–µ –Ω–∞–π–¥–µ–Ω: {dname}")
        if not sent_any:
            await context.bot.send_message(chat_id=chat_id, text="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return

# ===== –ê–î–ú–ò–ù-–•–ï–õ–ü–ï–†–´ –∏ –ö–û–ú–ê–ù–î–´ =====
def _is_admin(chat_id: int) -> bool:
    return str(chat_id) in ADMIN_IDS

def _stats_counts() -> Tuple[int, Dict[int, int]]:
    total = len(USERS)
    by_step: Dict[int, int] = {1: 0, 2: 0, 3: 0, 4: 0}
    for st in USERS.values():
        s = st.get("step", 1)
        by_step[s] = by_step.get(s, 0) + 1
    return total, by_step

async def users_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not _is_admin(update.effective_chat.id):
        return
    if not USERS:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞–∂–∏–º–∞–ª /start.")
        return
    lines: List[str] = []
    for uid, st in USERS.items():
        step = st.get("step", 1)
        last = st.get("last")
        last_str = last.strftime("%Y-%m-%d %H:%M") if hasattr(last, "strftime") else str(last)
        lines.append(f"{uid} ‚Äî —É—Ä–æ–∫ {step} (–ø–æ—Å–ª–µ–¥–Ω–∏–π: {last_str})")
    chunk = ""
    for line in lines:
        if len(chunk) + len(line) + 1 > 4000:
            await update.message.reply_text(chunk)
            chunk = ""
        chunk += line + "\n"
    if chunk:
        await update.message.reply_text(chunk)

async def stuck1_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not _is_admin(update.effective_chat.id):
        return
    stuck = []
    for uid, st in USERS.items():
        if st.get("step", 1) == 1:
            last = st.get("last")
            last_str = last.strftime("%Y-%m-%d %H:%M") if hasattr(last, "strftime") else str(last)
            stuck.append(f"{uid} ‚Äî —É—Ä–æ–∫ 1 (–ø–æ—Å–ª–µ–¥–Ω–∏–π: {last_str})")
    if not stuck:
        await update.message.reply_text("–ù–∏–∫—Ç–æ –Ω–µ –∑–∞—Å—Ç—Ä—è–ª –Ω–∞ —É—Ä–æ–∫–µ 1 üéâ")
        return
    chunk = ""
    for line in stuck:
        if len(chunk) + len(line) + 1 > 4000:
            await update.message.reply_text(chunk)
            chunk = ""
        chunk += line + "\n"
    if chunk:
        await update.message.reply_text(chunk)

async def stats_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not _is_admin(update.effective_chat.id):
        return
    total, by_step = _stats_counts()
    msg = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
        f"‚Ä¢ –£—Ä–æ–∫ 1: {by_step.get(1,0)}\n"
        f"‚Ä¢ –£—Ä–æ–∫ 2: {by_step.get(2,0)}\n"
        f"‚Ä¢ –£—Ä–æ–∫ 3: {by_step.get(3,0)}\n"
        f"‚Ä¢ –£—Ä–æ–∫ 4: {by_step.get(4,0)}\n"
    )
    await update.message.reply_text(msg)

async def checkfiles_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not _is_admin(update.effective_chat.id):
        return
    lines: List[str] = []
    lines.append("üóÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ (–∏—â–µ–º –≤ media/ –∏ –≤ –∫–æ—Ä–Ω–µ)")
    for n, meta in LESSONS.items():
        title = meta.get("title", f"–£—Ä–æ–∫ {n}")
        vname = meta.get("video_file")
        vpath = find_path(vname) if vname else None
        lines.append(f"[{n}] {title}")
        lines.append(f"  video: {vname} -> {'OK' if vpath else 'NOT FOUND'}")
        for dname in meta.get("docs", []):
            dpath = find_path(dname)
            lines.append(f"  doc:   {dname} -> {'OK' if dpath else 'NOT FOUND'}")
    text = "\n".join(lines)
    while text:
        await update.message.reply_text(text[:3900])
        text = text[3900:]

async def exportusers_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not _is_admin(update.effective_chat.id):
        return
    if not os.path.exists(USERS_CSV):
        await update.message.reply_text("–§–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        return
    try:
        with open(USERS_CSV, "rb") as f:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=f,
                filename="users.csv",
                caption="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (chat_id, –¥–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞)"
            )
    except Exception as e:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å CSV: {e}")

# ===== –ê–í–¢–û–í–´–î–ê–ß–ê –ö–ê–ñ–î–´–ï 24 –ß–ê–°–ê =====
async def tick(context: ContextTypes.DEFAULT_TYPE) -> None:
    now = datetime.now()
    for chat_id, st in list(USERS.items()):
        step = st.get("step", 1)
        last = st.get("last", datetime.min)
        if step < 4 and now - last >= timedelta(days=1):
            USERS[chat_id]["step"] = step + 1
            USERS[chat_id]["last"] = now
            save_state()
            await send_lesson(context, int(chat_id), USERS[chat_id]["step"])

# ===== –ó–ê–ü–£–°–ö =====
def main() -> None:
    load_state()
    app = ApplicationBuilder().token(TOKEN).build()

    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("next", next_cmd))

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(on_callback))

    # –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("users", users_cmd))
    app.add_handler(CommandHandler("stuck1", stuck1_cmd))
    app.add_handler(CommandHandler("stats", stats_cmd))
    app.add_handler(CommandHandler("checkfiles", checkfiles_cmd))
    app.add_handler(CommandHandler("exportusers", exportusers_cmd))

    if app.job_queue is None:
        log.error('–ù—É–∂–µ–Ω –ø–∞–∫–µ—Ç: python-telegram-bot[job-queue]==20.7 –≤ requirements.txt')
        raise SystemExit(1)
    app.job_queue.run_repeating(tick, interval=60, first=10)

    log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω‚Ä¶ (YouTube + –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, 1 —É—Ä–æ–∫/—Å—É—Ç–∫–∏, –±–µ–∑ –∞–≤—Ç–æ-–≤–∏–¥–µ–æ)")
    app.run_polling()

if __name__ == "__main__":
    main()
