# -*- coding: utf-8 -*-
import os, re, asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
TOKEN = "8236283138:AAEjpYyGD9u6JXPcx-o1__ZY5yqkQvML-dU"   # —Ç–≤–æ–π —Ç–æ–∫–µ–Ω
YOUR_USERNAME = "vadimpobedniy"                             # –±–µ–∑ @
YOUTUBE_CHANNEL_URL = "https://www.youtube.com/@Protagonistofgame"
SONG_URL = "https://youtu.be/-orqHfJdo3E?si=7sCs_q7KTyd0rD8i"

# ===== –ú–ê–¢–ï–†–ò–ê–õ–´ –ü–û –£–†–û–ö–ê–ú =====
# video ‚Äî –ª–æ–∫–∞–ª—å–Ω—ã–π mp4 (–µ—Å–ª–∏ –µ—Å—Ç—å, –æ—Ç–¥–∞–¥–∏–º ¬´–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ¬ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç, —á—Ç–æ–±—ã –Ω–µ —Ä–µ–∑–∞–ª–æ 16:9)
# auto_file ‚Äî –¥–æ–ø. –¥–æ–∫—É–º–µ–Ω—Ç (PDF –∏ —Ç.–ø.) ‚Äî –ø—Ä–∏—à–ª—ë–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–Ω–æ–ø–æ–∫
# links ‚Äî –∫–Ω–æ–ø–∫–∏-–±–æ–Ω—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å—Ä–∞–∑—É
LESSONS = {
    1: {
        "title": "–£—Ä–æ–∫ 1: –¶–µ–Ω–∞ —Ç–µ–Ω–∏",
        "youtube": "https://youtu.be/ssLtF2UIVVc",
        "video": "lesson1.mp4",   # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–ª–æ–∂–∏ —Ä—è–¥–æ–º —Å bot.py, –∏–Ω–∞—á–µ –∫–Ω–æ–ø–∫–∞ ¬´–°–∫–∞—á–∞—Ç—å¬ª –Ω–µ –ø–æ–∫–∞–∂–µ—Ç—Å—è
        "auto_file": None,
        "links": [
            ("üß≠ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–±–æ—Ä (Evolution)", "https://evolution.life/p/vadimpobedniy/products"),
            ("‚ÑπÔ∏è –ß—Ç–æ —Ç–∞–∫–æ–µ Evolution? (–≤–∏–¥–µ–æ)", "https://youtu.be/jjq8STmDlf4?si=EQ9imb8Pw2lE9FTB"),
            ("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–¥–∏–º–æ–º", f"https://t.me/{YOUR_USERNAME}"),
        ],
    },
    2: {
        "title": "–£—Ä–æ–∫ 2: –û–±–Ω—É–ª—è–µ–º —Å—Ç—Ä–∞—Ö",
        "youtube": "https://youtu.be/wRysU2M19vI",
        "video": "lesson2.mp4",
        "auto_file": "podcast_30_questions.pdf",  # PDF ¬´30 –≤–æ–ø—Ä–æ—Å–æ–≤¬ª
        "links": [
            ("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–¥–∏–º–æ–º", f"https://t.me/{YOUR_USERNAME}"),
        ],
    },
    3: {
        "title": "–£—Ä–æ–∫ 3: –ì–æ–≤–æ—Ä–∏ —Ç–∞–∫, —á—Ç–æ–±—ã —Ç–µ–±—è —Å–ª—É—à–∞–ª–∏",
        "youtube": "https://youtu.be/zc5NLQ3y_68",
        "video": "lesson3.mp4",
        "auto_file": None,
        "links": [
            ("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–¥–∏–º–æ–º", f"https://t.me/{YOUR_USERNAME}"),
        ],
    },
    4: {
        "title": "–£—Ä–æ–∫ 4: –í—ã—Ö–æ–¥ –≤ —ç—Ñ–∏—Ä = —Ä–æ—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
        "youtube": "https://youtu.be/YoNxh203KCE",
        "video": "lesson4.mp4",
        "auto_file": "open any door.pdf",
        "links": [
            ("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–¥–∏–º–æ–º", f"https://t.me/{YOUR_USERNAME}"),
            ("üéµ ¬´–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏¬ª", SONG_URL),
            ("üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ YouTube ¬´–ì–ª–∞–≤–Ω—ã–π –ì–µ—Ä–æ–π¬ª", YOUTUBE_CHANNEL_URL),
        ],
        "final_note": (
            "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ç–æ, —á—Ç–æ –±—ã–ª —Å–æ –º–Ω–æ–π —ç—Ç–∏ —á–µ—Ç—ã—Ä–µ –¥–Ω—è. –Ø –≤–µ—Ä—é –≤ —Ç–≤–æ–π —É—Å–ø–µ—Ö. "
            "–ù–∞—á–∏–Ω–∞–π –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ ‚Äî –∏ —É —Ç–µ–±—è –≤—Å—ë –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è.\n\n"
            "–û—Ç–∫—Ä—ã—Ç –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–æ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–º —ç—Ñ–∏—Ä–∞–º, –ø–æ–¥–∫–∞—Å—Ç–∞–º –∏ –¥—Ä—É–≥–∏–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º. –Ø –Ω–∞ —Å–≤—è–∑–∏."
        ),
    },
}

# –•—Ä–∞–Ω–∏–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
USERS = {}  # chat_id -> {"step": int, "last": datetime}

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
def build_keyboard_for_lesson(n: int) -> InlineKeyboardMarkup:
    meta = LESSONS[n]
    rows = []
    if meta.get("youtube"):
        rows.append([InlineKeyboardButton("‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ YouTube", url=meta["youtube"])])
    # –∫–Ω–æ–ø–∫–∞ ¬´–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ¬ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å –Ω–∞ –¥–∏—Å–∫–µ
    vid = meta.get("video")
    if vid and os.path.exists(vid):
        rows.append([InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ (MP4)", callback_data=f"dl_video_{n}")])
    # –±–æ–Ω—É—Å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ ‚Äî –≤—Å–µ–≥–¥–∞
    for text, url in meta.get("links", []):
        rows.append([InlineKeyboardButton(text, url=url)])
    return InlineKeyboardMarkup(rows) if rows else None

async def send_lesson_package(context: ContextTypes.DEFAULT_TYPE, chat_id: int, n: int):
    meta = LESSONS[n]
    title = meta["title"]

    # 1) –¢–µ–∫—Å—Ç-–æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"‚≠êÔ∏è {title}\n\n–í—ã–±–∏—Ä–∞–π, –∫–∞–∫ —É–¥–æ–±–Ω–µ–µ —Å–º–æ—Ç—Ä–µ—Ç—å: YouTube –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ë–æ–Ω—É—Å—ã –Ω–∏–∂–µ ‚§µÔ∏è",
        reply_markup=build_keyboard_for_lesson(n)
    )

    # 2) –ê–≤—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
    auto_file = meta.get("auto_file")
    if auto_file:
        if os.path.exists(auto_file):
            try:
                with open(auto_file, "rb") as f:
                    await context.bot.send_document(chat_id=chat_id, document=f, filename=os.path.basename(auto_file))
            except Exception as e:
                await context.bot.send_message(chat_id=chat_id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {auto_file}\n{e}")
        else:
            await context.bot.send_message(chat_id=chat_id, text=f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {auto_file}")

    # 3) –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å (—Ç–æ–ª—å–∫–æ –≤ —É—Ä–æ–∫–µ 4, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞)
    if n == 4 and meta.get("final_note"):
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–¥–∏–º–æ–º", url=f"https://t.me/{YOUR_USERNAME}")],
            [InlineKeyboardButton("üéµ ¬´–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏¬ª", url=SONG_URL)],
            [InlineKeyboardButton("üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ YouTube ¬´–ì–ª–∞–≤–Ω—ã–π –ì–µ—Ä–æ–π¬ª", url=YOUTUBE_CHANNEL_URL)],
        ])
        await context.bot.send_message(chat_id=chat_id, text=meta["final_note"], reply_markup=kb)

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    USERS[chat_id] = {"step": 1, "last": datetime.now()}
    await update.message.reply_text("üöÄ –°—Ç–∞—Ä—Ç—É–µ–º. –¢–≤–æ–π –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –≥–æ—Ç–æ–≤ üëá")
    await send_lesson_package(context, chat_id, 1)

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = (q.data or "").strip()
    chat_id = q.message.chat.id

    m = re.match(r"dl_video_(\d+)$", data)
    if m:
        n = int(m.group(1))
        path = LESSONS.get(n, {}).get("video")
        if path and os.path.exists(path):
            try:
                with open(path, "rb") as f:
                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä–µ–∑–∞–ª 16:9 –≤ –∫–≤–∞–¥—Ä–∞—Ç
                    await context.bot.send_document(
                        chat_id=chat_id,
                        document=f,
                        filename=os.path.basename(path),
                        caption=LESSONS[n]["title"]
                    )
            except Exception as e:
                await context.bot.send_message(chat_id=chat_id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ: {e}")
        else:
            await context.bot.send_message(chat_id=chat_id, text="–í–∏–¥–µ–æ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –æ—Ç–¥–∞—ë–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
async def scheduler(app):
    while True:
        now = datetime.now()
        for chat_id, st in list(USERS.items()):
            step, last = st["step"], st["last"]
            if step < 4 and now - last >= timedelta(days=1):
                next_step = step + 1
                USERS[chat_id]["step"] = next_step
                USERS[chat_id]["last"] = now
                await send_lesson_package(app.bot, chat_id, next_step)
            elif step == 4:
                # –≤—Å—ë –≤—ã–¥–∞–ª–∏ ‚Äî –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏ –ø–æ—Å–ª–µ 4-–≥–æ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
                pass
        await asyncio.sleep(60)  # –æ–ø—Ä–æ—Å —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

# ===== –ó–ê–ü–£–°–ö =====
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(on_callback))
    # —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    loop = asyncio.get_event_loop()
    loop.create_task(scheduler(app))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω‚Ä¶ (–±–æ–µ–≤–æ–π —Ä–µ–∂–∏–º: 1 —É—Ä–æ–∫ –≤ —Å—É—Ç–∫–∏)")
    app.run_polling()

