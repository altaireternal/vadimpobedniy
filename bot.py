# -*- coding: utf-8 -*-
# –ë–æ—Ç: YouTube + –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã + –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–∑ –≤ 24 —á–∞—Å–∞.
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∫–∞–∫ –≤ –∫–æ—Ä–Ω–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, —Ç–∞–∫ –∏ –≤ –ø–∞–ø–∫–µ media/.
# –¢—Ä–µ–±—É–µ—Ç—Å—è: python-telegram-bot[job-queue]==20.7  (–≤ requirements.txt —Ä–æ–≤–Ω–æ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞)

import os, json, logging, re
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
)

logging.basicConfig(format="%(asctime)s %(levelname)s %(message)s", level=logging.INFO)
log = logging.getLogger("bot")

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
TOKEN = (os.getenv("BOT_TOKEN") or os.getenv("TOKEN") or "").strip()
YOUR_USERNAME = os.getenv("YOUR_USERNAME", "vadimpobedniy")

if not TOKEN:
    log.error("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ Railway ‚Üí Variables.")
    raise SystemExit(1)

STATE_FILE = "/tmp/state.json"   # –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# ---- –•–µ–ª–ø–µ—Ä—ã –ø—É—Ç–µ–π ----
SEARCH_DIRS: List[str] = ["media", "."]  # —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ media/, –∑–∞—Ç–µ–º –≤ –∫–æ—Ä–Ω–µ —Ä–µ–ø–æ

def find_path(filename: Optional[str]) -> Optional[str]:
    """–í–µ—Ä–Ω—ë—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ media/ –∏–ª–∏ –≤ –∫–æ—Ä–Ω–µ —Ä–µ–ø–æ."""
    if not filename:
        return None
    for base in SEARCH_DIRS:
        path = os.path.join(base, filename) if base != "." else filename
        if os.path.exists(path):
            return path
    return None

# ===== –£–†–û–ö–ò (–ø–æ–¥–ø—Ä–∞–≤—å –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ–¥ —Å–≤–æ–∏; –≤–∏–¥–µ–æ <= ~50 –ú–ë) =====
LESSONS: Dict[int, Dict[str, Any]] = {
    1: {
        "title": "–£—Ä–æ–∫ 1: –¶–µ–Ω–∞ —Ç–µ–Ω–∏",
        "youtube": "https://youtu.be/ssLtF2UIVVc",
        "video_file": "lesson1.mp4",                 # –∏—â–µ–º —Å–Ω–∞—á–∞–ª–∞ media/lesson1.mp4, –ø–æ—Ç–æ–º ./lesson1.mp4
        "docs": [],                                   # –Ω–∞–ø—Ä.: ["lesson1_bonus.pdf"]
        "links": [
            ("üß≠ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–±–æ—Ä (Evolution)", "https://evolution.life/p/vadimpobedniy/products"),
            ("‚ÑπÔ∏è –ß—Ç–æ —Ç–∞–∫–æ–µ Evolution? (–≤–∏–¥–µ–æ)", "https://youtu.be/jjq8STmDlf4?si=EQ9imb8Pw2lE9FTB"),
            ("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–¥–∏–º–æ–º", f"https://t.me/{YOUR_USERNAME}"),
        ],
        "final_note": None,
    },
    2: {
        "title": "–£—Ä–æ–∫ 2: –û–±–Ω—É–ª—è–µ–º —Å—Ç—Ä–∞—Ö",
        "youtube": "https://youtu.be/wRysU2M19vI",
        "video_file": "lesson2.mp4",
        "docs": ["podcast_30_questions.pdf"],
        "links": [("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–¥–∏–º–æ–º", f"https://t.me/{YOUR_USERNAME}")],
        "final_note": None,
    },
    3: {
        "title": "–£—Ä–æ–∫ 3: –ì–æ–≤–æ—Ä–∏ —Ç–∞–∫, —á—Ç–æ–±—ã —Ç–µ–±—è —Å–ª—É—à–∞–ª–∏",
        "youtube": "https://youtu.be/zc5NLQ3y_68",
        "video_file": "lesson3.mp4",
        "docs": [],  # –Ω–∞–ø—Ä.: ["lesson3_practice.pdf"]
        "links": [("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–¥–∏–º–æ–º", f"https://t.me/{YOUR_USERNAME}")],
        "final_note": None,
    },
    4: {
        "title": "–£—Ä–æ–∫ 4: –í—ã—Ö–æ–¥ –≤ —ç—Ñ–∏—Ä = —Ä–æ—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
        "youtube": "https://youtu.be/YoNxh203KCE",
        "video_file": "lesson4.mp4",
        "docs": ["open any door.pdf"],
        "links": [
            ("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–¥–∏–º–æ–º", f"https://t.me/{YOUR_USERNAME}"),
            ("üéµ ¬´–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏¬ª", "https://youtu.be/-orqHfJdo3E?si=7sCs_q7KTyd0rD8i"),
            ("üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ YouTube ¬´–ì–ª–∞–≤–Ω—ã–π –ì–µ—Ä–æ–π¬ª", "https://www.youtube.com/@Protagonistofgame"),
        ],
        "final_note": (
            "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ç–æ, —á—Ç–æ –±—ã–ª —Å–æ –º–Ω–æ–π —ç—Ç–∏ —á–µ—Ç—ã—Ä–µ –¥–Ω—è. –Ø –≤–µ—Ä—é –≤ —Ç–≤–æ–π —É—Å–ø–µ—Ö. "
            "–ù–∞—á–∏–Ω–∞–π –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ ‚Äî –∏ —É —Ç–µ–±—è –≤—Å—ë –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è.\n\n"
            "–û—Ç–∫—Ä—ã—Ç –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–æ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–º —ç—Ñ–∏—Ä–∞–º, –ø–æ–¥–∫–∞—Å—Ç–∞–º –∏ –¥—Ä—É–≥–∏–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º. –Ø –Ω–∞ —Å–≤—è–∑–∏."
        ),
    },
}

# ===== –ü–†–û–ì–†–ï–°–° =====
USERS: Dict[str, Dict[str, Any]] = {}

def load_state():
    global USERS
    try:
        if os.path.exists(STATE_FILE) and os.path.getsize(STATE_FILE) > 0:
            with open(STATE_FILE, "r", encoding="utf-8") as f:
                raw = json.load(f)
            USERS = {}
            for cid, st in raw.items():
                last = st.get("last")
                USERS[cid] = {
                    "step": st.get("step", 1),
                    "last": datetime.fromisoformat(last) if last else datetime.min
                }
            log.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(USERS)}")
        else:
            USERS = {}
            log.info("STATE –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç ‚Äî –Ω–∞—á–Ω—ë–º —Å –Ω—É–ª—è")
    except Exception as e:
        log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")
        USERS = {}

def save_state():
    out = {cid: {"step": st.get("step", 1), "last": st.get("last", datetime.min).isoformat()} for cid, st in USERS.items()}
    try:
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(out, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")

# ===== –ö–ù–û–ü–ö–ò =====
def kb_for_lesson(n: int) -> InlineKeyboardMarkup:
    meta = LESSONS[n]
    rows = []
    if meta.get("youtube"):
        rows.append([InlineKeyboardButton("‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ YouTube", url=meta["youtube"])])
    if meta.get("video_file"):
        rows.append([InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ (MP4 –±–µ–∑ —Å–∂–∞—Ç–∏—è)", callback_data=f"dl_video_{n}")])
    if meta.get("docs"):
        rows.append([InlineKeyboardButton("üìé –°–∫–∞—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã (PDF)", callback_data=f"dl_docs_{n}")])
    for text, url in meta.get("links", []):
        rows.append([InlineKeyboardButton(text, url=url)])
    return InlineKeyboardMarkup(rows) if rows else None

# ===== –û–¢–ü–†–ê–í–ö–ê –£–†–û–ö–ê =====
async def send_lesson(context: ContextTypes.DEFAULT_TYPE, chat_id: int, n: int):
    meta = LESSONS[n]

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º + –∫–Ω–æ–ø–∫–∏
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"‚≠êÔ∏è {meta['title']}\n\n–°–º–æ—Ç—Ä–∏ –Ω–∞ YouTube –∏–ª–∏ —Å–∫–∞—á–∞–π –æ—Ä–∏–≥–∏–Ω–∞–ª. –ë–æ–Ω—É—Å—ã –Ω–∏–∂–µ ‚§µÔ∏è",
        reply_markup=kb_for_lesson(n)
    )

    # 1) –í–∏–¥–µ–æ ‚Äî –∫–∞–∫ video (–ø—Ä–æ—Å–º–æ—Ç—Ä 16:9)
    vfile = find_path(meta.get("video_file"))
    if vfile:
        try:
            with open(vfile, "rb") as vf:
                await context.bot.send_video(
                    chat_id=chat_id,
                    video=vf,
                    caption=meta["title"],
                    supports_streaming=True
                )
        except Exception as e:
            await context.bot.send_message(chat_id=chat_id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ: {e}")
    elif meta.get("video_file"):
        await context.bot.send_message(chat_id=chat_id, text=f"–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {meta['video_file']}")

    # 2) –ë–æ–Ω—É—Å—ã ‚Äî –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–∫–∞–∂–¥—ã–π –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
    for dname in meta.get("docs", []):
        dpath = find_path(dname)
        if dpath:
            try:
                with open(dpath, "rb") as df:
                    await context.bot.send_document(
                        chat_id=chat_id,
                        document=df,
                        filename=os.path.basename(dpath),
                        caption="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ —É—Ä–æ–∫—É"
                    )
            except Exception as e:
                await context.bot.send_message(chat_id=chat_id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã: {e}")
        else:
            await context.bot.send_message(chat_id=chat_id, text=f"–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {dname}")

    # 3) –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤ 4-–º —É—Ä–æ–∫–µ
    if n == 4 and meta.get("final_note"):
        await context.bot.send_message(chat_id=chat_id, text=meta["final_note"], reply_markup=kb_for_lesson(n))

# ===== –ö–û–ú–ê–ù–î–´ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    if chat_id not in USERS:
        USERS[chat_id] = {"step": 1, "last": datetime.now()}
        save_state()
        await update.message.reply_text("üöÄ –°—Ç–∞—Ä—Ç—É–µ–º. –¢–≤–æ–π –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –≥–æ—Ç–æ–≤ üëá")
        await send_lesson(context, int(chat_id), 1)
    else:
        cur = USERS[chat_id]["step"]
        await update.message.reply_text("–ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏. –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ üëá")
        await send_lesson(context, int(chat_id), cur)

async def next_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    if chat_id not in USERS:
        USERS[chat_id] = {"step": 0, "last": datetime.now() - timedelta(days=2)}
    cur = USERS[chat_id]["step"]
    if cur >= 4:
        await update.message.reply_text("–í—Å–µ 4 —É—Ä–æ–∫–∞ —É–∂–µ –≤—ã–¥–∞–Ω—ã üéâ")
        return
    USERS[chat_id]["step"] = cur + 1
    USERS[chat_id]["last"] = datetime.now()
    save_state()
    await send_lesson(context, int(chat_id), USERS[chat_id]["step"])

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –°–ö–ê–ß–ê–¢–¨ =====
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = (q.data or "").strip()
    chat_id = int(q.message.chat.id)

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∫–∞–∫ document (–±–µ–∑ —Å–∂–∞—Ç–∏—è)
    m = re.match(r"dl_video_(\d+)$", data)
    if m:
        n = int(m.group(1))
        meta = LESSONS.get(n, {})
        vfile = find_path(meta.get("video_file"))
        if vfile:
            try:
                with open(vfile, "rb") as vf:
                    await context.bot.send_document(
                        chat_id=chat_id,
                        document=vf,
                        filename=os.path.basename(vfile),
                        caption="–°–∫–∞—á–∞–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ (MP4)"
                    )
            except Exception as e:
                await context.bot.send_message(chat_id=chat_id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ: {e}")
        else:
            await context.bot.send_message(chat_id=chat_id, text="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        return

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (PDF/–¥–æ–∫) –ø–æ –æ—á–µ—Ä–µ–¥–∏
    m = re.match(r"dl_docs_(\d+)$", data)
    if m:
        n = int(m.group(1))
        docs = LESSONS.get(n, {}).get("docs") or []
        if not docs:
            await context.bot.send_message(chat_id=chat_id, text="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return
        sent_any = False
        for dname in docs:
            dpath = find_path(dname)
            if dpath:
                try:
                    with open(dpath, "rb") as df:
                        await context.bot.send_document(
                            chat_id=chat_id,
                            document=df,
                            filename=os.path.basename(dpath),
                            caption="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ —É—Ä–æ–∫—É"
                        )
                    sent_any = True
                except Exception as e:
                    await context.bot.send_message(chat_id=chat_id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {os.path.basename(dpath)}\n{e}")
            else:
                await context.bot.send_message(chat_id=chat_id, text=f"–ù–µ –Ω–∞–π–¥–µ–Ω: {dname}")
        if not sent_any:
            await context.bot.send_message(chat_id=chat_id, text="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

# ===== –ê–í–¢–û –†–ê–ó –í –°–£–¢–ö–ò =====
async def tick(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now()
    for chat_id, st in list(USERS.items()):
        step, last = st.get("step", 1), st.get("last", datetime.min)
        if step < 4 and now - last >= timedelta(days=1):
            USERS[chat_id]["step"] = step + 1
            USERS[chat_id]["last"] = now
            save_state()
            await send_lesson(context, int(chat_id), USERS[chat_id]["step"])

# ===== –ó–ê–ü–£–°–ö =====
def main():
    load_state()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("next", next_cmd))
    app.add_handler(CallbackQueryHandler(on_callback))

    if app.job_queue is None:
        log.error('–ù—É–∂–µ–Ω –ø–∞–∫–µ—Ç: python-telegram-bot[job-queue]==20.7 –≤ requirements.txt')
        raise SystemExit(1)
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É, –≤—ã–¥–∞—á–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ ‚â• 24 —á–∞—Å–∞
    app.job_queue.run_repeating(tick, interval=60, first=10)

    log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω‚Ä¶ (YouTube + –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, 1 —É—Ä–æ–∫/—Å—É—Ç–∫–∏)")
    app.run_polling()

if __name__ == "__main__":
    main()
