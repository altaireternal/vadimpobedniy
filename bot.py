def kb_for_lesson(n: int) -> InlineKeyboardMarkup | None:
    meta = LESSONS[n]
    rows = []
    if meta.get("youtube"):
        rows.append([InlineKeyboardButton("‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ YouTube", url=meta["youtube"])])
    vid = meta.get("video")
    if vid and os.path.exists(vid):
        rows.append([InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ (MP4)", callback_data=f"dl_video_{n}")])
    for text, url in meta.get("links", []):
        rows.append([InlineKeyboardButton(text, url=url)])
    return InlineKeyboardMarkup(rows) if rows else None

async def send_lesson(context: ContextTypes.DEFAULT_TYPE, chat_id: int, n: int):
    meta = LESSONS[n]
    # 1) –¢–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫–∏
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"‚≠êÔ∏è {meta['title']}\n\n–í—ã–±–∏—Ä–∞–π, –∫–∞–∫ —É–¥–æ–±–Ω–µ–µ —Å–º–æ—Ç—Ä–µ—Ç—å: YouTube –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ë–æ–Ω—É—Å—ã –Ω–∏–∂–µ ‚§µÔ∏è",
        reply_markup=kb_for_lesson(n)
    )
    # 2) –ê–≤—Ç–æ-–¥–æ–∫
    file_path = meta.get("auto_file")
    if file_path:
        if os.path.exists(file_path):
            try:
                with open(file_path, "rb") as f:
                    await context.bot.send_document(chat_id=chat_id, document=f, filename=os.path.basename(file_path))
            except Exception as e:
                await context.bot.send_message(chat_id=chat_id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {file_path}\n{e}")
        else:
            await context.bot.send_message(chat_id=chat_id, text=f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    # 3) –§–∏–Ω–∞–ª –¥–ª—è 4-–≥–æ
    if n == 4 and meta.get("final_note"):
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–¥–∏–º–æ–º", url=f"https://t.me/{YOUR_USERNAME}")],
            [InlineKeyboardButton("üéµ ¬´–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏¬ª", url=SONG_URL)],
            [InlineKeyboardButton("üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ YouTube ¬´–ì–ª–∞–≤–Ω—ã–π –ì–µ—Ä–æ–π¬ª", url=YOUTUBE_CHANNEL_URL)],
        ])
        await context.bot.send_message(chat_id=chat_id, text=meta["final_note"], reply_markup=kb)

# ---------- –•–≠–ù–î–õ–ï–†–´ ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    if chat_id not in USERS:
        USERS[chat_id] = {"step": 1, "last": datetime.now()}
        save_state()
        await update.message.reply_text("üöÄ –°—Ç–∞—Ä—Ç—É–µ–º. –¢–≤–æ–π –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –≥–æ—Ç–æ–≤ üëá")
        await send_lesson(context, int(chat_id), 1)
    else:
        cur = USERS[chat_id]["step"]
        await update.message.reply_text("–ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏. –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ üëá")
        await send_lesson(context, int(chat_id), cur)

async def next_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    if chat_id not in USERS:
        USERS[chat_id] = {"step": 0, "last": datetime.now() - timedelta(days=2)}
    cur = USERS[chat_id]["step"]
    if cur >= 4:
        await update.message.reply_text("–í—Å–µ 4 —É—Ä–æ–∫–∞ —É–∂–µ –≤—ã–¥–∞–Ω—ã üéâ")
        return
    USERS[chat_id]["step"] = cur + 1
    USERS[chat_id]["last"] = datetime.now()
    save_state()
    await send_lesson(context, int(chat_id), USERS[chat_id]["step"])

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = (q.data or "").strip()
    chat_id = str(q.message.chat.id)

    m = re.match(r"dl_video_(\d+)$", data)
    if m:
        n = int(m.group(1))
        path = LESSONS.get(n, {}).get("video")
        if path and os.path.exists(path):
            try:
                with open(path, "rb") as f:
                    await context.bot.send_document(
                        chat_id=int(chat_id),
                        document=f,
                        filename=os.path.basename(path),
                        caption=LESSONS[n]["title"]
                    )
            except Exception as e:
                await context.bot.send_message(chat_id=int(chat_id), text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ: {e}")
        else:
            await context.bot.send_message(chat_id=int(chat_id), text="–í–∏–¥–µ–æ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

# ---------- –ï–ñ–ï–ú–ò–ù–£–¢–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ----------
async def tick(context: ContextTypes.DEFAULT_TYPE):now = datetime.now()
    for chat_id, st in list(USERS.items()):
        step, last = st.get("step", 1), st.get("last", datetime.min)
        if step < 4 and now - last >= timedelta(days=1):
            USERS[chat_id]["step"] = step + 1
            USERS[chat_id]["last"] = now
            save_state()
            await send_lesson(context, int(chat_id), USERS[chat_id]["step"])

# ---------- –ó–ê–ü–£–°–ö ----------
def main():
    # –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ä—Ç–∞
    log.info("–°—Ç–∞—Ä—Ç –±–æ—Ç–∞‚Ä¶")
    log.info(f"PWD: {os.getcwd()}")
    log.info(f"–§–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ: {', '.join(os.listdir('.'))}")
    load_state()

    app: Application = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("next", next_cmd))
    app.add_handler(CallbackQueryHandler(on_callback))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ PTB: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫
    app.job_queue.run_repeating(tick, interval=60, first=10)

    log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω‚Ä¶ (–±–æ–µ–≤–æ–π —Ä–µ–∂–∏–º: 1 —É—Ä–æ–∫/—Å—É—Ç–∫–∏)")
    app.run_polling()

if name == "__main__":
    main()
