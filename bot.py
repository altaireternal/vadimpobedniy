# -*- coding: utf-8 -*-
# bot.py ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å JobQueue (–µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤—ã–¥–∞—á–∞ —É—Ä–æ–∫–æ–≤)
# –í–∞–∂–Ω–æ: –≤ requirements.txt –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞:
#   python-telegram-bot[job-queue]==20.7

import os, re, json, logging
from datetime import datetime, timedelta
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(format="%(asctime)s %(levelname)s %(message)s", level=logging.INFO)
log = logging.getLogger("bot")

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------
TOKEN = (os.getenv("BOT_TOKEN") or os.getenv("TOKEN") or "").strip()
YOUR_USERNAME = os.getenv("YOUR_USERNAME", "vadimpobedniy")

YOUTUBE_CHANNEL_URL = "https://www.youtube.com/@Protagonistofgame"
SONG_URL = "https://youtu.be/-orqHfJdo3E?si=7sCs_q7KTyd0rD8i"

STATE_FILE = "/tmp/state.json"  # –∑–¥–µ—Å—å Railway —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –∑–∞–ø–∏—Å—å

if not TOKEN:
    log.error("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ Railway ‚Üí Variables.")
    raise SystemExit(1)

# ---------- –£–†–û–ö–ò ----------
LESSONS = {
    1: {
        "title": "–£—Ä–æ–∫ 1: –¶–µ–Ω–∞ —Ç–µ–Ω–∏",
        "youtube": "https://youtu.be/ssLtF2UIVVc",
        "video": None,
        "auto_file": None,
        "links": [
            ("üß≠ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–±–æ—Ä (Evolution)", "https://evolution.life/p/vadimpobedniy/products"),
            ("‚ÑπÔ∏è –ß—Ç–æ —Ç–∞–∫–æ–µ Evolution? (–≤–∏–¥–µ–æ)", "https://youtu.be/jjq8STmDlf4?si=EQ9imb8Pw2lE9FTB"),
            ("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–¥–∏–º–æ–º", f"https://t.me/{YOUR_USERNAME}"),
        ],
    },
    2: {
        "title": "–£—Ä–æ–∫ 2: –û–±–Ω—É–ª—è–µ–º —Å—Ç—Ä–∞—Ö",
        "youtube": "https://youtu.be/wRysU2M19vI",
        "video": None,
        "auto_file": "podcast_30_questions.pdf",   # –ª–µ–∂–∏—Ç —Ä—è–¥–æ–º —Å bot.py
        "links": [("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–¥–∏–º–æ–º", f"https://t.me/{YOUR_USERNAME}")],
    },
    3: {
        "title": "–£—Ä–æ–∫ 3: –ì–æ–≤–æ—Ä–∏ —Ç–∞–∫, —á—Ç–æ–±—ã —Ç–µ–±—è —Å–ª—É—à–∞–ª–∏",
        "youtube": "https://youtu.be/zc5NLQ3y_68",
        "video": None,
        "auto_file": None,
        "links": [("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–¥–∏–º–æ–º", f"https://t.me/{YOUR_USERNAME}")],
    },
    4: {
        "title": "–£—Ä–æ–∫ 4: –í—ã—Ö–æ–¥ –≤ —ç—Ñ–∏—Ä = —Ä–æ—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
        "youtube": "https://youtu.be/YoNxh203KCE",
        "video": None,
        "auto_file": "open any door.pdf",          # –ª–µ–∂–∏—Ç —Ä—è–¥–æ–º —Å bot.py
        "links": [
            ("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–¥–∏–º–æ–º", f"https://t.me/{YOUR_USERNAME}"),
            ("üéµ ¬´–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏¬ª", SONG_URL),
            ("üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ YouTube ¬´–ì–ª–∞–≤–Ω—ã–π –ì–µ—Ä–æ–π¬ª", YOUTUBE_CHANNEL_URL),
        ],
        "final_note": (
            "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ç–æ, —á—Ç–æ –±—ã–ª —Å–æ –º–Ω–æ–π —ç—Ç–∏ —á–µ—Ç—ã—Ä–µ –¥–Ω—è. –Ø –≤–µ—Ä—é –≤ —Ç–≤–æ–π —É—Å–ø–µ—Ö. "
            "–ù–∞—á–∏–Ω–∞–π –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ ‚Äî –∏ —É —Ç–µ–±—è –≤—Å—ë –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è.\n\n"
            "–û—Ç–∫—Ä—ã—Ç –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–æ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–º —ç—Ñ–∏—Ä–∞–º, –ø–æ–¥–∫–∞—Å—Ç–∞–º –∏ –¥—Ä—É–≥–∏–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º. –Ø –Ω–∞ —Å–≤—è–∑–∏."
        ),
    },
}

# ---------- –ü–†–û–ì–†–ï–°–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ----------
USERS: Dict[str, Dict[str, Any]] = {}

def load_state():
    """–ß–∏—Ç–∞–µ–º /tmp/state.json (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è)."""
    global USERS
    try:
        if os.path.exists(STATE_FILE) and os.path.getsize(STATE_FILE) > 0:
            with open(STATE_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
            for k, v in data.items():
                s = v.get("last")
                v["last"] = datetime.fromisoformat(s) if isinstance(s, str) else datetime.min
            USERS = data
            log.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(USERS)}")
        else:
            USERS = {}
            log.info("STATE –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç ‚Äî –Ω–∞—á–Ω–µ–º —Å –Ω—É–ª—è")
    except Exception as e:
        log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")
        USERS = {}

def save_state():
    """–ü–∏—à–µ–º /tmp/state.json."""
    try:
        out = {k: {"step": v.get("step", 1), "last": v.get("last", datetime.min).isoformat()} for k, v in USERS.items()}
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(out, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")

# ---------- –ö–ù–û–ü–ö–ò / –û–¢–ü–†–ê–í–ö–ê ----------
def kb_for_lesson(n: int) -> InlineKeyboardMarkup | None:
    meta = LESSONS[n]
    rows = []
    if meta.get("youtube"):
        rows.append([InlineKeyboardButton("‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ YouTube", url=meta["youtube"])])
    vid = meta.get("video")
    if vid and os.path.exists(vid):
        rows.append([InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ (MP4)", callback_data=f"dl_video_{n}")])
    for text, url in meta.get("links", []):
        rows.append([InlineKeyboardButton(text, url=url)])
    return InlineKeyboardMarkup(rows) if rows else None

async def send_lesson(context: ContextTypes.DEFAULT_TYPE, chat_id: int, n: int):
    meta = LESSONS[n]
    # 1) –¢–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫–∏
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"‚≠êÔ∏è {meta['title']}\n\n–í—ã–±–∏—Ä–∞–π, –∫–∞–∫ —É–¥–æ–±–Ω–µ–µ —Å–º–æ—Ç—Ä–µ—Ç—å: YouTube –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ë–æ–Ω—É—Å—ã –Ω–∏–∂–µ ‚§µÔ∏è",
        reply_markup=kb_for_lesson(n)
    )
    # 2) –ê–≤—Ç–æ-–¥–æ–∫
    file_path = meta.get("auto_file")
    if file_path:
        if os.path.exists(file_path):
            try:
                with open(file_path, "rb") as f:
                    await context.bot.send_document(chat_id=chat_id, document=f, filename=os.path.basename(file_path))
            except Exception as e:
                await context.bot.send_message(chat_id=chat_id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {file_path}\n{e}")
        else:
            await context.bot.send_message(chat_id=chat_id, text=f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    # 3) –§–∏–Ω–∞–ª –¥–ª—è 4-–≥–æ —É—Ä–æ–∫–∞
    if n == 4 and meta.get("final_note"):
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–¥–∏–º–æ–º", url=f"https://t.me/{YOUR_USERNAME}")],
            [InlineKeyboardButton("üéµ ¬´–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏¬ª", url=SONG_URL)],
            [InlineKeyboardButton("üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ YouTube ¬´–ì–ª–∞–≤–Ω—ã–π –ì–µ—Ä–æ–π¬ª", url=YOUTUBE_CHANNEL_URL)],
        ])
        await context.bot.send_message(chat_id=chat_id, text=meta["final_note"], reply_markup=kb)

# ---------- –ö–û–ú–ê–ù–î–´ ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    if chat_id not in USERS:
        USERS[chat_id] = {"step": 1, "last": datetime.now()}
        save_state()
        await update.message.reply_text("üöÄ –°—Ç–∞—Ä—Ç—É–µ–º. –¢–≤–æ–π –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –≥–æ—Ç–æ–≤ üëá")
        await send_lesson(context, int(chat_id), 1)
    else:
        cur = USERS[chat_id]["step"]
        await update.message.reply_text("–ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏. –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ üëá")
        await send_lesson(context, int(chat_id), cur)

async def next_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—É—á–Ω–æ–π —à–∞–≥ –≤–ø–µ—Ä—ë–¥ (–µ—Å–ª–∏ –∫–æ–º—É-—Ç–æ –Ω—É–∂–Ω–æ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫)."""
    chat_id = str(update.effective_chat.id)
    if chat_id not in USERS:
        USERS[chat_id] = {"step": 0, "last": datetime.now() - timedelta(days=2)}
    cur = USERS[chat_id]["step"]
    if cur >= 4:
        await update.message.reply_text("–í—Å–µ 4 —É—Ä–æ–∫–∞ —É–∂–µ –≤—ã–¥–∞–Ω—ã üéâ")
        return
    USERS[chat_id]["step"] = cur + 1
    USERS[chat_id]["last"] = datetime.now()
    save_state()
    await send_lesson(context, int(chat_id), USERS[chat_id]["step"])

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = (q.data or "").strip()
    chat_id = str(q.message.chat.id)
    m = re.match(r"dl_video_(\d+)$", data)
    if m:
        n = int(m.group(1))
        path = LESSONS.get(n, {}).get("video")
        if path and os.path.exists(path):
            try:
                with open(path, "rb") as f:
                    await context.bot.send_document(
                        chat_id=int(chat_id),
                        document=f,
                        filename=os.path.basename(path),
                        caption=LESSONS[n]["title"]
                    )
            except Exception as e:
                await context.bot.send_message(chat_id=int(chat_id), text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ: {e}")
        else:
            await context.bot.send_message(chat_id=int(chat_id), text="–í–∏–¥–µ–æ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

# ---------- –ê–í–¢–û-–í–´–î–ê–ß–ê –†–ê–ó –í –°–£–¢–ö–ò ----------
async def tick(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now()
    for chat_id, st in list(USERS.items()):
        step, last = st.get("step", 1), st.get("last", datetime.min)
        if step < 4 and now - last >= timedelta(days=1):
            USERS[chat_id]["step"] = step + 1
            USERS[chat_id]["last"] = now
            save_state()
            await send_lesson(context, int(chat_id), USERS[chat_id]["step"])

# ---------- –ó–ê–ü–£–°–ö ----------
def main():
    log.info("–°—Ç–∞—Ä—Ç –±–æ—Ç–∞‚Ä¶")
    load_state()

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("next", next_cmd))
    app.add_handler(CallbackQueryHandler(on_callback))

    # –í–ê–ñ–ù–û: –Ω—É–∂–µ–Ω –ø–∞–∫–µ—Ç —Å job-queue. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ‚Äî —Å–∫–∞–∂–µ–º –æ–± —ç—Ç–æ–º –∏ –≤—ã–π–¥–µ–º.
    if app.job_queue is None:
        log.error('JobQueue –Ω–µ —Å–æ–∑–¥–∞–Ω. –í requirements.txt –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞: python-telegram-bot[job-queue]==20.7')
        raise SystemExit(1)

    # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–º—É –ø–æ—Ä–∞ –≤—ã–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
    app.job_queue.run_repeating(tick, interval=60, first=10)

    log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω‚Ä¶ (–±–æ–µ–≤–æ–π —Ä–µ–∂–∏–º: 1 —É—Ä–æ–∫/—Å—É—Ç–∫–∏)")
    app.run_polling()

if __name__ == "__main__":
    main()
